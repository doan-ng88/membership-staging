// Generated by Cursor
import axios from 'axios';
import type { LoginCredentials, RegisterCredentials, AuthResponse } from '@/types/auth';

const API_URL = import.meta.env.VITE_API_BASE_URL;

// Tạo instance axios với base URL và cấu hình phù hợp cho production
const axiosInstance = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  },
  timeout: 30000,
  withCredentials: false // Tắt withCredentials vì không cần thiết cho API này
});

export const authApi = {
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      // Gọi trực tiếp đến endpoint login không cần thêm /api prefix
      const response = await axiosInstance.post<AuthResponse>(
        'membership/login',
        credentials
      );
      return response.data;
    } catch (error: any) {
      console.error('Login API error:', error);
      throw error;
    }
  },

  async register(credentials: RegisterCredentials): Promise<AuthResponse> {
    try {
      const response = await axiosInstance.post<AuthResponse>(
        '/api/membership/register',
        credentials
      );
      return response.data;
    } catch (error: any) {
      console.error('Register API error:', error);
      throw error;
    }
  },

  async logout(): Promise<void> {
    try {
      await axiosInstance.post('/api/membership/logout');
    } catch (error: any) {
      console.warn('Logout API failed:', error);
      throw error;
    }
  }
};

// Axios interceptor để thêm token vào header
axiosInstance.interceptors.request.use(config => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Axios interceptor để xử lý lỗi
axiosInstance.interceptors.response.use(
  response => response,
  error => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;
// End Generated by Cursor